
pip install -r requirements.txt

docker build -t friendlyhello .



docker run -d -p 4000:80 friendlyhello

curl http://localhost:4000

docker login

docker tag friendlyhello zknyy/get-started:v01
sudo docker push zknyy/get-started:v01

----------------------------------------------------
$ docker swarm init
Swarm initialized: current node (o2qcab93tmmc9dplueg8ouq4r) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-3enb4uioodk3u4a5bgnlwetj0ppy33uyh4tz4ld17c65upy4ps-e1846wx37k9c1wry4qtaz67sk 192.168.1.133:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.



docker stack deploy -c docker-compose.yml getstartedlab
docker service ls
docker service ps getstartedlab_web
docker container ls -q
curl -4 http://localhost


----->>>  Modify the scale in file docker-compose.yml
docker stack deploy -c docker-compose.yml getstartedlab


#   docker stack rm getstartedlab 
#   docker swarm leave --force

================================================================================
docker stack ls                                            # List stacks or apps
docker stack deploy -c <composefile> <appname>  # Run the specified Compose file
docker service ls                 # List running services associated with an app
docker service ps <service>                  # List tasks associated with an app
docker inspect <task or container>                   # Inspect task or container
docker container ls -q                                      # List container IDs
docker stack rm <appname>                             # Tear down an application
docker swarm leave --force      # Take down a single node swarm from the manager
================================================================================

-------------------------------------------------------------------------------------------------
docker swarm init
#install Oracle VirtualBox
docker-machine create --driver virtualbox myvm1
docker-machine create --driver virtualbox myvm2

docker-machine ls


docker-machine ssh myvm1
docker-machine ssh myvm2
docker-machine --native-ssh ssh myvm1
docker-machine --native-ssh ssh myvm1


 docker swarm init --advertise-addr 192.168.1.133
To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-4yjoxyromuvysbrm7nmfu9bf5dbv61p1zx0met78ms0uhthbqz-e7d7b3t0yato6551cj2bcwm22 192.168.1.133:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.
docker-machine ssh myvm1------------------myvm1
ifconfig   --->>> if --- eth0






docker-machine ssh myvm1 "docker swarm init --advertise-addr 192.168.99.100"
Swarm initialized: current node (iscqhqqowpxappmp8rakd1h06) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-0nazod6tjry4fhk8v64gebdamk9giss6hzs6tj8mlu1co7bcqp-4o45a1mnmn7pn14qdfkwaiiqg 192.168.99.100:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.





docker-machine ssh myvm2 "docker swarm join \
--token SWMTKN-1-0nazod6tjry4fhk8v64gebdamk9giss6hzs6tj8mlu1co7bcqp-4o45a1mnmn7pn14qdfkwaiiqg \
192.168.99.100:2377"


This node joined a swarm as a worker.

 docker-machine ssh myvm1 "docker node ls"
ID                            HOSTNAME            STATUS              AVAILABILITY        MANAGER STATUS
iscqhqqowpxappmp8rakd1h06 *   myvm1               Ready               Active              Leader
r72ply7dj1yiqcdezcwdik36p     myvm2               Ready               Active              


##docker swarm leave


docker-machine env myvm1
###export DOCKER_TLS_VERIFY="1"
###export DOCKER_HOST="tcp://192.168.99.100:2376"
###export DOCKER_CERT_PATH="/home/demo/.docker/machine/machines/myvm1"
###export DOCKER_MACHINE_NAME="myvm1"
#### Run this command to configure your shell: 
#### eval $(docker-machine env myvm1)

$(docker-machine env myvm1)                ------>>>> send local file into myvm1
[demo@demo-UDOO-x86 getstartedlab [myvm1]]$ docker stack deploy -c docker-compose.yml getstartedlab
[demo@demo-UDOO-x86 getstartedlab [myvm1]]$ docker-machine ls
curl -4 http://192.168.99.100
docker stack ps getstartedlab
[demo@demo-UDOO-x86 getstartedlab [myvm1]]$ docker stack ps getstartedlab
ID                  NAME                  IMAGE                   NODE                DESIRED STATE       CURRENT STATE           ERROR               PORTS
6in4ko5uy9wz        getstartedlab_web.1   zknyy/get-started:v01   myvm2               Running             Running 7 minutes ago                       
utsearycw4bn        getstartedlab_web.2   zknyy/get-started:v01   myvm2               Running             Running 7 minutes ago                       
rnze9dqhn4f0        getstartedlab_web.3   zknyy/get-started:v01   myvm1               Running             Running 7 minutes ago                       
mc0iyatd713g        getstartedlab_web.4   zknyy/get-started:v01   myvm2               Running             Running 7 minutes ago                       
4ymzc6ylzfdd        getstartedlab_web.5   zknyy/get-started:v01   myvm1               Running             Running 7 minutes ago   


#docker stack rm getstartedlab
docker-machine ssh myvm2 "docker swarm leave"
docker-machine ssh myvm1 "docker swarm leave --force"
eval $(docker-machine env -u)

======================================================
    Connecting to VMs with docker-machine env and docker-machine ssh
        To set your shell to talk to a different machine like myvm2, simply re-run docker-machine env in the same or a different shell, then run the given command to point to myvm2. This is always specific to the current shell. If you change to an unconfigured shell or open a new one, you need to re-run the commands. Use docker-machine ls to list machines, see what state they are in, get IP addresses, and find out which one, if any, you are connected to. To learn more, see the Docker Machine getting started topics.
        Alternatively, you can wrap Docker commands in the form of docker-machine ssh <machine> "<command>", which logs directly into the VM but doesnâ€™t give you immediate access to files on your local host.
        On Mac and Linux, you can use docker-machine scp <file> <machine>:~ to copy files across machines, but Windows users need a Linux terminal emulator like Git Bash for this to work.
    This tutorial demos both docker-machine ssh and docker-machine env, since these are available on all platforms via the docker-machine CLI.




======================================================
docker-machine create --driver virtualbox myvm1 # Create a VM (Mac, Win7, Linux)
docker-machine create -d hyperv --hyperv-virtual-switch "myswitch" myvm1 # Win10
docker-machine env myvm1                # View basic information about your node
docker-machine ssh myvm1 "docker node ls"         # List the nodes in your swarm
docker-machine ssh myvm1 "docker node inspect <node ID>"        # Inspect a node
docker-machine ssh myvm1 "docker swarm join-token -q worker"   # View join token
docker-machine ssh myvm1   # Open an SSH session with the VM; type "exit" to end
docker node ls                # View nodes in swarm (while logged on to manager)
docker-machine ssh myvm2 "docker swarm leave"  # Make the worker leave the swarm
docker-machine ssh myvm1 "docker swarm leave -f" # Make master leave, kill swarm
docker-machine ls # list VMs, asterisk shows which VM this shell is talking to
docker-machine start myvm1            # Start a VM that is currently not running
docker-machine env myvm1      # show environment variables and command for myvm1
eval $(docker-machine env myvm1)         # Mac command to connect shell to myvm1
& "C:\Program Files\Docker\Docker\Resources\bin\docker-machine.exe" env myvm1 | Invoke-Expression   # Windows command to connect shell to myvm1
docker stack deploy -c <file> <app>  # Deploy an app; command shell must be set to talk to manager (myvm1), uses local Compose file
docker-machine scp docker-compose.yml myvm1:~ # Copy file to node's home dir (only required if you use ssh to connect to manager and deploy the app)
docker-machine ssh myvm1 "docker stack deploy -c <file> <app>"   # Deploy an app using ssh (you must have first copied the Compose file to myvm1)
eval $(docker-machine env -u)     # Disconnect shell from VMs, use native docker
docker-machine stop $(docker-machine ls -q)               # Stop all running VMs
docker-machine rm $(docker-machine ls -q) # Delete all VMs and their disk images


======================================================

